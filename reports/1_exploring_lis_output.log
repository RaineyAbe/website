Traceback (most recent call last):
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbclient/client.py", line 1107, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/srv/conda/envs/notebook/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbclient/client.py", line 852, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# create S3 filesystem object
s3 = s3fs.S3FileSystem(anon=False)

# define the name of our S3 bucket
bucket_name = 'eis-dh-hydro/SNOWEX-HACKWEEK'

# define path to store on S3
lis_output_s3_path = f's3://{bucket_name}/DA_SNODAS/SURFACEMODEL/LIS_HIST.d01.zarr/'

# create key-value mapper for S3 object (required to read data stored on S3)
lis_output_mapper = s3.get_mapper(lis_output_s3_path)

# open the dataset
lis_output_ds = xr.open_zarr(lis_output_mapper, consolidated=True)

# drop some unneeded variables
lis_output_ds = lis_output_ds.drop_vars(['_history', '_eis_source_path'])
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mClientError[0m                               Traceback (most recent call last)
[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/s3fs/core.py[0m in [0;36m_call_s3[0;34m(self, method, *akwarglist, **kwargs)[0m
[1;32m    245[0m             [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 246[0;31m                 [0mout[0m [0;34m=[0m [0;32mawait[0m [0mmethod[0m[0;34m([0m[0;34m**[0m[0madditional_kwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    247[0m                 [0;32mreturn[0m [0mout[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/aiobotocore/client.py[0m in [0;36m_make_api_call[0;34m(self, operation_name, api_params)[0m
[1;32m    153[0m             [0merror_class[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mexceptions[0m[0;34m.[0m[0mfrom_code[0m[0;34m([0m[0merror_code[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 154[0;31m             [0;32mraise[0m [0merror_class[0m[0;34m([0m[0mparsed_response[0m[0;34m,[0m [0moperation_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    155[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mClientError[0m: An error occurred (ExpiredToken) when calling the GetObject operation: The provided token has expired.

The above exception was the direct cause of the following exception:

[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-2-39445f31765c>[0m in [0;36m<module>[0;34m[0m
[1;32m     12[0m [0;34m[0m[0m
[1;32m     13[0m [0;31m# open the dataset[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 14[0;31m [0mlis_output_ds[0m [0;34m=[0m [0mxr[0m[0;34m.[0m[0mopen_zarr[0m[0;34m([0m[0mlis_output_mapper[0m[0;34m,[0m [0mconsolidated[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     15[0m [0;34m[0m[0m
[1;32m     16[0m [0;31m# drop some unneeded variables[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/zarr.py[0m in [0;36mopen_zarr[0;34m(store, group, synchronizer, chunks, decode_cf, mask_and_scale, decode_times, concat_characters, decode_coords, drop_variables, consolidated, overwrite_encoded_chunks, chunk_store, storage_options, decode_timedelta, use_cftime, **kwargs)[0m
[1;32m    685[0m     }
[1;32m    686[0m [0;34m[0m[0m
[0;32m--> 687[0;31m     ds = open_dataset(
[0m[1;32m    688[0m         [0mfilename_or_obj[0m[0;34m=[0m[0mstore[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    689[0m         [0mgroup[0m[0;34m=[0m[0mgroup[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/api.py[0m in [0;36mopen_dataset[0;34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, backend_kwargs, *args, **kwargs)[0m
[1;32m    494[0m [0;34m[0m[0m
[1;32m    495[0m     [0moverwrite_encoded_chunks[0m [0;34m=[0m [0mkwargs[0m[0;34m.[0m[0mpop[0m[0;34m([0m[0;34m"overwrite_encoded_chunks"[0m[0;34m,[0m [0;32mNone[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 496[0;31m     backend_ds = backend.open_dataset(
[0m[1;32m    497[0m         [0mfilename_or_obj[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    498[0m         [0mdrop_variables[0m[0;34m=[0m[0mdrop_variables[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/zarr.py[0m in [0;36mopen_dataset[0;34m(self, filename_or_obj, mask_and_scale, decode_times, concat_characters, decode_coords, drop_variables, use_cftime, decode_timedelta, group, mode, synchronizer, consolidated, consolidate_on_close, chunk_store, storage_options, lock)[0m
[1;32m    732[0m [0;34m[0m[0m
[1;32m    733[0m         [0mfilename_or_obj[0m [0;34m=[0m [0m_normalize_path[0m[0;34m([0m[0mfilename_or_obj[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 734[0;31m         store = ZarrStore.open_group(
[0m[1;32m    735[0m             [0mfilename_or_obj[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    736[0m             [0mgroup[0m[0;34m=[0m[0mgroup[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/zarr.py[0m in [0;36mopen_group[0;34m(cls, store, mode, synchronizer, group, consolidated, consolidate_on_close, chunk_store, storage_options, append_dim, write_region, safe_chunks)[0m
[1;32m    334[0m         [0;32mif[0m [0mconsolidated[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    335[0m             [0;31m# TODO: an option to pass the metadata_key keyword[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 336[0;31m             [0mzarr_group[0m [0;34m=[0m [0mzarr[0m[0;34m.[0m[0mopen_consolidated[0m[0;34m([0m[0mstore[0m[0;34m,[0m [0;34m**[0m[0mopen_kwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    337[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    338[0m             [0mzarr_group[0m [0;34m=[0m [0mzarr[0m[0;34m.[0m[0mopen_group[0m[0;34m([0m[0mstore[0m[0;34m,[0m [0;34m**[0m[0mopen_kwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/zarr/convenience.py[0m in [0;36mopen_consolidated[0;34m(store, metadata_key, mode, **kwargs)[0m
[1;32m   1176[0m [0;34m[0m[0m
[1;32m   1177[0m     [0;31m# setup metadata store[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1178[0;31m     [0mmeta_store[0m [0;34m=[0m [0mConsolidatedMetadataStore[0m[0;34m([0m[0mstore[0m[0;34m,[0m [0mmetadata_key[0m[0;34m=[0m[0mmetadata_key[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1179[0m [0;34m[0m[0m
[1;32m   1180[0m     [0;31m# pass through[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/zarr/storage.py[0m in [0;36m__init__[0;34m(self, store, metadata_key)[0m
[1;32m   2767[0m [0;34m[0m[0m
[1;32m   2768[0m         [0;31m# retrieve consolidated metadata[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2769[0;31m         [0mmeta[0m [0;34m=[0m [0mjson_loads[0m[0;34m([0m[0mstore[0m[0;34m[[0m[0mmetadata_key[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   2770[0m [0;34m[0m[0m
[1;32m   2771[0m         [0;31m# check format of consolidated metadata[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/fsspec/mapping.py[0m in [0;36m__getitem__[0;34m(self, key, default)[0m
[1;32m    131[0m         [0mk[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_key_to_str[0m[0;34m([0m[0mkey[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    132[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 133[0;31m             [0mresult[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mfs[0m[0;34m.[0m[0mcat[0m[0;34m([0m[0mk[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    134[0m         [0;32mexcept[0m [0mself[0m[0;34m.[0m[0mmissing_exceptions[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    135[0m             [0;32mif[0m [0mdefault[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/fsspec/asyn.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m     85[0m     [0;32mdef[0m [0mwrapper[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     86[0m         [0mself[0m [0;34m=[0m [0mobj[0m [0;32mor[0m [0margs[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 87[0;31m         [0;32mreturn[0m [0msync[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mloop[0m[0;34m,[0m [0mfunc[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     88[0m [0;34m[0m[0m
[1;32m     89[0m     [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/fsspec/asyn.py[0m in [0;36msync[0;34m(loop, func, timeout, *args, **kwargs)[0m
[1;32m     66[0m         [0;32mraise[0m [0mFSTimeoutError[0m[0;34m[0m[0;34m[0m[0m
[1;32m     67[0m     [0;32mif[0m [0misinstance[0m[0;34m([0m[0mresult[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m [0mBaseException[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 68[0;31m         [0;32mraise[0m [0mresult[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     69[0m     [0;32mreturn[0m [0mresult[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     70[0m [0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/fsspec/asyn.py[0m in [0;36m_runner[0;34m(event, coro, result, timeout)[0m
[1;32m     22[0m         [0mcoro[0m [0;34m=[0m [0masyncio[0m[0;34m.[0m[0mwait_for[0m[0;34m([0m[0mcoro[0m[0;34m,[0m [0mtimeout[0m[0;34m=[0m[0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     23[0m     [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 24[0;31m         [0mresult[0m[0;34m[[0m[0;36m0[0m[0;34m][0m [0;34m=[0m [0;32mawait[0m [0mcoro[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     25[0m     [0;32mexcept[0m [0mException[0m [0;32mas[0m [0mex[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     26[0m         [0mresult[0m[0;34m[[0m[0;36m0[0m[0;34m][0m [0;34m=[0m [0mex[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/fsspec/asyn.py[0m in [0;36m_cat[0;34m(self, path, recursive, on_error, **kwargs)[0m
[1;32m    335[0m             [0mex[0m [0;34m=[0m [0mnext[0m[0;34m([0m[0mfilter[0m[0;34m([0m[0mis_exception[0m[0;34m,[0m [0mout[0m[0;34m)[0m[0;34m,[0m [0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    336[0m             [0;32mif[0m [0mex[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 337[0;31m                 [0;32mraise[0m [0mex[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    338[0m         if (
[1;32m    339[0m             [0mlen[0m[0;34m([0m[0mpaths[0m[0;34m)[0m [0;34m>[0m [0;36m1[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/s3fs/core.py[0m in [0;36m_cat_file[0;34m(self, path, version_id, start, end)[0m
[1;32m    847[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    848[0m             [0mhead[0m [0;34m=[0m [0;34m{[0m[0;34m}[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 849[0;31m         resp = await self._call_s3(
[0m[1;32m    850[0m             [0;34m"get_object"[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    851[0m             [0mBucket[0m[0;34m=[0m[0mbucket[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/s3fs/core.py[0m in [0;36m_call_s3[0;34m(self, method, *akwarglist, **kwargs)[0m
[1;32m    263[0m             [0;32mexcept[0m [0mException[0m [0;32mas[0m [0me[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    264[0m                 [0merr[0m [0;34m=[0m [0me[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 265[0;31m         [0;32mraise[0m [0mtranslate_boto_error[0m[0;34m([0m[0merr[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    266[0m [0;34m[0m[0m
[1;32m    267[0m     [0mcall_s3[0m [0;34m=[0m [0msync_wrapper[0m[0;34m([0m[0m_call_s3[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: The provided token has expired.
PermissionError: The provided token has expired.

